{"version":3,"sources":["Images/logo.png","Component/index.js","Component/Header.js","View/Page/Home.js","View/Page/Pgsql.js","View/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","state","className","rel","href","src","logo","width","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","this","menu","map","prop","key","page","name","Component","Home","style","fontSize","size","color","title","HomeView","Pgsql","PgsqlView","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb83938a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.72cfda8f.png\";","import HeaderCp from \"./Header\";\n\nexport const Header = HeaderCp;\n","import React, { Component } from \"react\";\nimport \"./Header.css\";\nimport logo  from \"../Images/logo.png\";\n\nexport default class Header extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"menu\": [\n                {\"name\": \"MySQL\", \"href\": \"#/\"},\n                {\"name\": \"Postgres\", \"href\": \"#/pgsql\"}\n            ]\n        };\n    }\n\n    render() {\n        return(\n            <nav className=\"navbar navbar-expand-lg navbar-light bgDark\">\n                <div className=\"container\">\n                    <a rel=\"noopener noreferrer\" className=\"navbar-brand\" href=\"#/\">\n                        <img src={logo} width=\"50\" height=\"50\" alt=\"logo vmagic\"/>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul className=\"navbar-nav\">\n                            {\n                                this.state.menu.map((prop, key) => {\n                                    let className = \"nav-item\";\n                                    if (this.props.page === key) {\n                                        className += \" border-bottom\"\n                                    }\n                                    return (\n                                        <li key={key} className={className}>\n                                            <a className={\"nav-link text-white\"} rel=\"noopener noreferrer\" href={prop.href}>{prop.name}</a>\n                                        </li>\n                                    )\n                                })\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Header } from \"../../Component\";\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport {MdArrowDropUp} from \"react-icons/md\";\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n    render() {\n        return (\n            <div id=\"home\">\n                <Header page={0} />\n                <div className=\"container\">\n                    <ul className=\"list-group positionList\">\n                        <AnchorLink href=\"#instalation\" className=\"list-group-item list-group-item-action\">Instalação</AnchorLink>\n                        <AnchorLink href=\"#structure\" className=\"list-group-item list-group-item-action\">Estrutura do projeto</AnchorLink>\n                        <AnchorLink href=\"#config\" className=\"list-group-item list-group-item-action\">Configuração</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"list-group-item list-group-item-action\">Controller</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"ml-2 list-group-item list-group-item-action text-secondary\" style={{fontSize: 15}}>Métodos</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"ml-2 list-group-item list-group-item-action\">FindBy()</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAll\" className=\"ml-2 list-group-item list-group-item-action\">FindAll()</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAllParams\" className=\"ml-2 list-group-item list-group-item-action\">FindAll(parametros)</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAllJoin\" className=\"ml-2 list-group-item list-group-item-action\">FindAll() com join</AnchorLink>\n                        <AnchorLink href=\"#controllerSave\" className=\"ml-2 list-group-item list-group-item-action\">Save()</AnchorLink>\n                        <AnchorLink href=\"#controllerUpdate\" className=\"ml-2 list-group-item list-group-item-action\">Update()</AnchorLink>\n                        <AnchorLink href=\"#controllerDelete\" className=\"ml-2 list-group-item list-group-item-action\">Delete()</AnchorLink>\n                        <AnchorLink href=\"#model\" className=\"list-group-item list-group-item-action\">Model</AnchorLink>\n                    </ul>\n                    <div className=\"margin\">\n                        <h1 className=\"text-secondary\">MySql</h1>\n                        <div id=\"instalation\">\n                            <h5>Instalando o vMagic</h5>\n                            <p className=\"text-secondary\">Instale-o da seguinte maneira usando o npm</p>\n                            <p className=\"text-secondary font-weight-bold\">$ npm install -g vmagic-cli</p>\n                            <h5 className=\"mt-2\">Depois de instalado, você pode usar o comando vmagic-cli new para criar um novo projeto.</h5>\n                            <p className=\"text-secondary\">Por exemplo, para criar um novo projeto chamado emvApi, basta executar:</p>\n                            <p className=\"text-secondary font-weight-bold\">$ vmagic-cli new emvApi</p>\n                        </div>\n                        <div id=\"config\">\n                            <h5>Configurando conexão MySQL</h5>\n                            <p className=\"text-secondary\">Editar o arquivo: src/Config/core.json</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        {\n                                            \"dataSources\" : {\n                                                \"default\" : {\n                                                    \"dataSource\" : \"MySQL\",\n                                                    \"host\" : \"localhost\",\n                                                    \"port\" : 3306,\n                                                    \"user\" : \"root\",\n                                                    \"password\" : \"\",\n                                                    \"database\" : \"\",\n                                                    \"connectionLimit\" : 50 //Caso não informado o padrão será 10\n                                                },\n                                                \"test\" : {\n                                                    \"dataSource\" : \"MySQL\",\n                                                    \"host\" : \"localhost\",\n                                                    \"port\" : 3306,\n                                                    \"user\" : \"root\",\n                                                    \"password\" : \"\",\n                                                    \"database\" : \"\",\n                                                    \"connectionLimit\" : 50 //Caso não informado o padrão será 10\n                                                }\n                                            }\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"structure\">\n                            <h5>Após criar um novo projeto, virá com a seguinte estrutura.</h5>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        ├── NomeProjeto/\n                                            ├── src/\n                                                ├── Config/\n                                                    ├──Core.json\n                                                ├── Controller/\n                                                    ├──ExamplesControllerTest.js\n                                                    ├──AppController.js\n                                                └── Model/\n                                                    ├──Example.js\n                                            ├── test/\n                                                ├── Controller/\n                                                    ├──ExamplesControllerTest.js\n                                            ├── Gruntfile.js\n                                            ├── init.js\n                                            └── package.json\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div className=\"mt-5\" id=\"controllerFindBy\">\n                            <h3 className=\"text-secondary font-weight-bold\">Métodos da controller</h3>\n                            <h5>FindBy()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar por um ou mais campos da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        'use strict';\n                                        const AppController = require('./AppController');\n                                        \n                                        class ExamplesController extends AppController {\n                                        \n                                            init() {\n                                                this.model('Example');\n                                            }\n                                            //Função a ser chamada em sua requisição do tipo get - http://127.0.0.1:5555/Examples?id=1\n                                            //Caso o nome de sua função for diferente de get() então deverá passar o nome da função junto a chamada.\n                                            Ex: http://127.0.0.1:5555/Examples/NomeFuncao/?id=1\n\n                                            get(callback) {\n                                                this.Example.findBy({\"id\": this.query.id}).\n                                                    //Este método corresponde ao seguinte sql:\n                                                    // SELECT * FROM Example WHERE id = 1;\n                                                    then(res => {\n                                                        this.logger.info(res.rows);\n                                                        //Retorna a resposta para o front end.\n                                                        callback(this.responseSuccess(res.rows));\n                                                    }).\n                                                    catch(err => {\n                                                        this.statusCode = 500;\n                                                        this.logger.error(err.message)\n                                                        callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                    });\n                                            }\n                                        }\n\n                                        module.exports = ExamplesController;\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAll\">\n                            <h5>FindAll()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar todos os registros da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            this.Example.findAll().\n                                                //Este método corresponde ao seguinte sql:\n                                                // SELECT * FROM Example;\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAllParams\">\n                            <h5>FindAll(parametros)</h5>\n                            <p className=\"text-secondary\">Método usado para buscar todos os registros da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            //Com parametros;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"user_id\": this.query.user_id\n                                                },{\n                                                    \"name\": this.query.name,\n                                                }]\n                                            }\n\n                                            //Fazendo buscas pelo nome;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"name\": '%' + this.query.name + '%',\n                                                    \"operation\": \"ILIKE\"\n                                                }],\n                                            }\n\n                                            //Order, Group, Limit;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"name\": '%' + this.query.name + '%',\n                                                    \"operation\": \"ILIKE\"\n                                                }],\n                                                \"order\": [\"name\", \"id\"],\n                                                \"group\": [\"name\"],\n                                                \"limit\": \"10\",\n                                            }\n\n                                            this.Example.findAll(params).\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAllParams\">\n                            <h5>FindAll com join</h5>\n                            <p className=\"text-secondary\">Método usado para buscar os registros da base de dados com join</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            const params = {\n                                                \"conditions\": {\n                                                    \"user_id\": this.query.user_id\n                                                },\n                                                \"join\": {\n                                                    //Tipo do join(INNER, LEFT);\n                                                    \"INNER\": {\n                                                        \"table\": \"tableexample\",\n                                                        \"on\": \"tableexample.example_id = example.id\"\n                                                    }\n                                                },\n                                                \"fields\": [\"tableexample.*\", \"example.id AS example_id, example.name\"]\n                                            }\n\n                                            this.Example.findAll(params).\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerSave\">\n                            <h5>Save()</h5>\n                            <p className=\"text-secondary\">Método usado para salvar um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        post(callback) {\n                                            this.Example.Save(this.payload).\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerSave\">\n                            <h5>Update()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar atualizar um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        put(callback) {\n                                            this.Example.Update(this.payload, {\"id\": this.id}).\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerDelete\">\n                            <h5>Delete()</h5>\n                            <p className=\"text-secondary\">Método usado para excluir um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        delete(callback) {\n                                            this.Example.Delete({\"id\": this.payload.id}).\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"model\">\n                            <h5>Sobrescrevendo o método findAll()</h5>\n                            <p className=\"text-secondary\">Na model pode sobrescrever algum método padão ou criar um novo.</p>\n\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        'use strict';\n                                        var AppModel = require('vmagic/AppModel');\n                                        \n                                        class Example extends AppModel {\n                                            init() {\n                                                this.useTable = 'example';\n                                                //É necessário que instancie o component Mysql para poder sobrescrever o método.\n                                                this.mysql = this.component('MySQL');\n                                            }\n\n                                            findAll() {\n                                                const that = this;\n                                        \n                                                return new Promise((resolve, reject) => {\n                                                    const sql = \"select * from example\";\n                                        \n                                                    this.mysql.connect().\n                                                        then(connection => {\n                                                            connection.query(\n                                                                sql, [],\n                                                                function (err, res) {\n                                                                    that.mysql.close(connection);\n                                                                    if (err) {\n                                                                        reject(err);\n                                                                    } else {\n                                                                        resolve(res);\n                                                                    }\n                                                                }\n                                                            );\n                                                        }).\n                                                        catch(err => {\n                                                            reject(err);\n                                                        });\n                                                });\n                                            }\n\n                                        }\n\n                                        module.exports = Example;\n                                    `}\n                                </code>\n                            </pre>\n                            <h5>Sobrescrevendo o método findBy()</h5>\n\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        findBy(id) {\n                                            const that = this;\n\n                                            return new Promise((resolve, reject) => {\n                                                const sql = \"SELECT * FROM example WHERE id = $1\";\n                                    \n                                                this.mysql.connect().\n                                                    then(connection => {\n                                                        connection.query(\n                                                            sql, [id],\n                                                            function (err, res) {\n                                                                that.mysql.close(connection);\n                                                                if (err) {\n                                                                    reject(err);\n                                                                } else {\n                                                                    resolve(res);\n                                                                }\n                                                            }\n                                                        );\n                                                    }).\n                                                    catch(err => {\n                                                        reject(err);\n                                                    });\n                                            });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n                    </div>\n                    <AnchorLink href=\"#home\" className=\"btn btn-secondary backToTop\">\n                        <MdArrowDropUp size={50} color=\"#220052\" title=\"Voltar ao topo\" />\n                    </AnchorLink>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Header } from \"../../Component\";\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport {MdArrowDropUp} from \"react-icons/md\";\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n    render() {\n        return (\n            <div id=\"home\">\n                <Header page={1} />\n                <div className=\"container\">\n                    <ul className=\"list-group positionList\">\n                        <AnchorLink href=\"#instalation\" className=\"list-group-item list-group-item-action\">Instalação</AnchorLink>\n                        <AnchorLink href=\"#structure\" className=\"list-group-item list-group-item-action\">Estrutura do projeto</AnchorLink>\n                        <AnchorLink href=\"#config\" className=\"list-group-item list-group-item-action\">Configuração</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"list-group-item list-group-item-action\">Controller</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"ml-2 list-group-item list-group-item-action text-secondary\" style={{fontSize: 15}}>Métodos</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"ml-2 list-group-item list-group-item-action\">FindBy()</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAll\" className=\"ml-2 list-group-item list-group-item-action\">FindAll()</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAllParams\" className=\"ml-2 list-group-item list-group-item-action\">FindAll(parametros)</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAllJoin\" className=\"ml-2 list-group-item list-group-item-action\">FindAll() com join</AnchorLink>\n                        <AnchorLink href=\"#controllerSave\" className=\"ml-2 list-group-item list-group-item-action\">Save()</AnchorLink>\n                        <AnchorLink href=\"#controllerUpdate\" className=\"ml-2 list-group-item list-group-item-action\">Update()</AnchorLink>\n                        <AnchorLink href=\"#controllerDelete\" className=\"ml-2 list-group-item list-group-item-action\">Delete()</AnchorLink>\n                        <AnchorLink href=\"#model\" className=\"list-group-item list-group-item-action\">Model</AnchorLink>\n                    </ul>\n                    <div className=\"margin\">\n                        <h1 className=\"text-secondary\">Postgres</h1>\n                        <div id=\"instalation\">\n                            <h5>Instalando o vMagic</h5>\n                            <p className=\"text-secondary\">Instale-o da seguinte maneira usando o npm</p>\n                            <p className=\"text-secondary font-weight-bold\">$ npm install -g vmagic-cli</p>\n                            <h5 className=\"mt-2\">Depois de instalado, você pode usar o comando vmagic-cli new para criar um novo projeto.</h5>\n                            <p className=\"text-secondary\">Por exemplo, para criar um novo projeto chamado emvApi, basta executar:</p>\n                            <p className=\"text-secondary font-weight-bold\">$ vmagic-cli new emvApi</p>\n                        </div>\n                        <div id=\"config\">\n                            <h5>Configurando conexão Postgres</h5>\n                            <p className=\"text-secondary\">Editar o arquivo: src/Config/core.json</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        {\n                                            \"dataSources\" : {\n                                                \"default\" : {\n                                                    \"dataSource\" : \"PgSQL\",\n                                                    \"host\" : \"localhost\",\n                                                    \"port\" : 3306,\n                                                    \"user\" : \"root\",\n                                                    \"password\" : \"\",\n                                                    \"database\" : \"\",\n                                                    \"connectionLimit\" : 50 //Caso não informado o padrão será 10\n                                                },\n                                                \"test\" : {\n                                                    \"dataSource\" : \"PgSQL\",\n                                                    \"host\" : \"localhost\",\n                                                    \"port\" : 3306,\n                                                    \"user\" : \"root\",\n                                                    \"password\" : \"\",\n                                                    \"database\" : \"\",\n                                                    \"connectionLimit\" : 50 //Caso não informado o padrão será 10\n                                                }\n                                            }\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"structure\">\n                            <h5>Após criar um novo projeto, virá com a seguinte estrutura.</h5>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        ├── NomeProjeto/\n                                            ├── src/\n                                                ├── Config/\n                                                    ├──Core.json\n                                                ├── Controller/\n                                                    ├──ExamplesControllerTest.js\n                                                    ├──AppController.js\n                                                └── Model/\n                                                    ├──Example.js\n                                            ├── test/\n                                                ├── Controller/\n                                                    ├──ExamplesControllerTest.js\n                                            ├── Gruntfile.js\n                                            ├── init.js\n                                            └── package.json\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div className=\"mt-5\" id=\"controllerFindBy\">\n                            <h3 className=\"text-secondary font-weight-bold\">Métodos da controller</h3>\n                            <h5>FindBy()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar por um ou mais campos da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        'use strict';\n                                        const AppController = require('./AppController');\n                                        \n                                        class ExamplesController extends AppController {\n                                        \n                                            init() {\n                                                this.model('Example');\n                                            }\n                                            //Função a ser chamada em sua requisição do tipo get - http://127.0.0.1:5555/Examples?id=1\n                                            //Caso o nome de sua função for diferente de get() então deverá passar o nome da função junto a chamada.\n                                            Ex: http://127.0.0.1:5555/Examples/NomeFuncao/?id=1\n\n                                            get(callback) {\n                                                this.Example.findBy({\"id\": this.query.id}).\n                                                    //Este método corresponde ao seguinte sql:\n                                                    // SELECT * FROM Example WHERE id = 1;\n                                                    then(res => {\n                                                        this.logger.info(res);\n                                                        //Retorna a resposta para o front end.\n                                                        callback(this.responseSuccess(res));\n                                                    }).\n                                                    catch(err => {\n                                                        this.statusCode = 500;\n                                                        this.logger.error(err.message)\n                                                        callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                    });\n                                            }\n                                        }\n\n                                        module.exports = ExamplesController;\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAll\">\n                            <h5>FindAll()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar todos os registros da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            this.Example.findAll().\n                                                //Este método corresponde ao seguinte sql:\n                                                // SELECT * FROM Example;\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAllParams\">\n                            <h5>FindAll(parametros)</h5>\n                            <p className=\"text-secondary\">Método usado para buscar todos os registros da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            //Com parametros;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"user_id\": this.query.user_id\n                                                },{\n                                                    \"name\": this.query.name,\n                                                }]\n                                            }\n\n                                            //Fazendo buscas pelo nome;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"name\": '%' + this.query.name + '%',\n                                                    \"operation\": \"ILIKE\"\n                                                }],\n                                            }\n\n                                            //Order, Group, Limit;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"name\": '%' + this.query.name + '%',\n                                                    \"operation\": \"ILIKE\"\n                                                }],\n                                                \"order\": [\"name\", \"id\"],\n                                                \"group\": [\"name\"],\n                                                \"limit\": \"10\",\n                                            }\n\n                                            this.Example.findAll(params).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAllParams\">\n                            <h5>FindAll com join</h5>\n                            <p className=\"text-secondary\">Método usado para buscar os registros da base de dados com join</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            const params = {\n                                                \"conditions\": {\n                                                    \"user_id\": this.query.user_id\n                                                },\n                                                \"join\": {\n                                                    //Tipo do join(INNER, LEFT);\n                                                    \"INNER\": {\n                                                        \"table\": \"tableexample\",\n                                                        \"on\": \"tableexample.example_id = example.id\"\n                                                    }\n                                                },\n                                                \"fields\": [\"tableexample.*\", \"example.id AS example_id, example.name\"]\n                                            }\n\n                                            this.Example.findAll(params).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerSave\">\n                            <h5>Save()</h5>\n                            <p className=\"text-secondary\">Método usado para salvar um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        post(callback) {\n                                            this.Example.Save(this.payload).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerSave\">\n                            <h5>Update()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar atualizar um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        put(callback) {\n                                            this.Example.Update(this.payload, {\"id\": this.id}).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerDelete\">\n                            <h5>Delete()</h5>\n                            <p className=\"text-secondary\">Método usado para excluir um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        delete(callback) {\n                                            this.Example.Delete({\"id\": this.payload.id}).\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"model\">\n                            <h5>Sobrescrevendo o método findAll()</h5>\n                            <p className=\"text-secondary\">Na model pode sobrescrever algum método padão ou criar um novo.</p>\n\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        'use strict';\n                                        var AppModel = require('vmagic/AppModel');\n                                        \n                                        class Example extends AppModel {\n                                            init() {\n                                                this.useTable = 'example';\n                                                //É necessário que instancie o component PgSQL para poder sobrescrever o método.\n                                                this.pgsql = this.component('PgSQL');\n                                            }\n\n                                            findAll() {\n                                                const that = this;\n                                        \n                                                return new Promise((resolve, reject) => {\n                                                    const sql = \"select * from example\";\n                                        \n                                                    this.pgsql.connect().\n                                                        then(connection => {\n                                                            connection.query(\n                                                                sql, [],\n                                                                function (err, res) {\n                                                                    that.pgsql.close(connection);\n                                                                    if (err) {\n                                                                        reject(err);\n                                                                    } else {\n                                                                        resolve(res);\n                                                                    }\n                                                                }\n                                                            );\n                                                        }).\n                                                        catch(err => {\n                                                            reject(err);\n                                                        });\n                                                });\n                                            }\n\n                                        }\n\n                                        module.exports = Example;\n                                    `}\n                                </code>\n                            </pre>\n                            <h5>Sobrescrevendo o método findBy()</h5>\n\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        findBy(id) {\n                                            const that = this;\n\n                                            return new Promise((resolve, reject) => {\n                                                const sql = \"SELECT * FROM example WHERE id = $1\";\n                                    \n                                                this.pgsql.connect().\n                                                    then(connection => {\n                                                        connection.query(\n                                                            sql, [id],\n                                                            function (err, res) {\n                                                                that.pgsql.close(connection);\n                                                                if (err) {\n                                                                    reject(err);\n                                                                } else {\n                                                                    resolve(res);\n                                                                }\n                                                            }\n                                                        );\n                                                    }).\n                                                    catch(err => {\n                                                        reject(err);\n                                                    });\n                                            });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n                    </div>\n                    <AnchorLink href=\"#home\" className=\"btn btn-secondary backToTop\">\n                        <MdArrowDropUp size={50} color=\"#220052\" title=\"Voltar ao topo\" />\n                    </AnchorLink>\n                </div>\n            </div>\n        )\n    }\n}","import HomeView from \"./Page/Home\";\nimport PgsqlView from \"./Page/Pgsql\";\n\nexport const Home = HomeView;\nexport const Pgsql = PgsqlView;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\n\nimport {\n    Home,\n    Pgsql\n} from \"./View\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n            <Router>\n                <div>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/pgsql\" component={Pgsql} />\n                </div>\n            </Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}