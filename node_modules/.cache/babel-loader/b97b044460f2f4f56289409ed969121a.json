{"ast":null,"code":"var _jsxFileName = \"/home/emv/Documents/Projects/vmagic-doc/src/View/Page/Pgsql.js\";\nimport React, { Component } from 'react';\nimport { Header } from \"../../Component\";\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport { MdArrowDropUp } from \"react-icons/md\";\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(Header, {\n      page: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group positionList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(AnchorLink, {\n      href: \"#instalation\",\n      className: \"list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Instala\\xE7\\xE3o\"), React.createElement(AnchorLink, {\n      href: \"#structure\",\n      className: \"list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Estrutura do projeto\"), React.createElement(AnchorLink, {\n      href: \"#config\",\n      className: \"list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Configura\\xE7\\xE3o\"), React.createElement(AnchorLink, {\n      href: \"#controllerFindBy\",\n      className: \"list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Controller\"), React.createElement(AnchorLink, {\n      href: \"#controllerFindBy\",\n      className: \"ml-2 list-group-item list-group-item-action text-secondary\",\n      style: {\n        fontSize: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"M\\xE9todos\"), React.createElement(AnchorLink, {\n      href: \"#controllerFindBy\",\n      className: \"ml-2 list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"FindBy()\"), React.createElement(AnchorLink, {\n      href: \"#controllerFindAll\",\n      className: \"ml-2 list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"FindAll()\"), React.createElement(AnchorLink, {\n      href: \"#controllerFindAllParams\",\n      className: \"ml-2 list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"FindAll(parametros)\"), React.createElement(AnchorLink, {\n      href: \"#controllerFindAllJoin\",\n      className: \"ml-2 list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"FindAll() com join\"), React.createElement(AnchorLink, {\n      href: \"#controllerSave\",\n      className: \"ml-2 list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Save()\"), React.createElement(AnchorLink, {\n      href: \"#controllerUpdate\",\n      className: \"ml-2 list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Update()\"), React.createElement(AnchorLink, {\n      href: \"#controllerDelete\",\n      className: \"ml-2 list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Delete()\"), React.createElement(AnchorLink, {\n      href: \"#model\",\n      className: \"list-group-item list-group-item-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Model\")), React.createElement(\"div\", {\n      className: \"margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Postgres\"), React.createElement(\"div\", {\n      id: \"instalation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Instalando o vMagic\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Instale-o da seguinte maneira usando o npm\"), React.createElement(\"p\", {\n      className: \"text-secondary font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"$ npm install -g vmagic-cli\"), React.createElement(\"h5\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Depois de instalado, voc\\xEA pode usar o comando vmagic-cli new para criar um novo projeto.\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Por exemplo, para criar um novo projeto chamado emvApi, basta executar:\"), React.createElement(\"p\", {\n      className: \"text-secondary font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"$ vmagic-cli new emvApi\")), React.createElement(\"div\", {\n      id: \"config\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Configurando conex\\xE3o Postgres\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Editar o arquivo: src/Config/core.json\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"\\n                                        {\\n                                            \\\"dataSources\\\" : {\\n                                                \\\"default\\\" : {\\n                                                    \\\"dataSource\\\" : \\\"PgSQL\\\",\\n                                                    \\\"host\\\" : \\\"localhost\\\",\\n                                                    \\\"port\\\" : 3306,\\n                                                    \\\"user\\\" : \\\"root\\\",\\n                                                    \\\"password\\\" : \\\"\\\",\\n                                                    \\\"database\\\" : \\\"\\\",\\n                                                    \\\"connectionLimit\\\" : 50 //Caso n\\xE3o informado o padr\\xE3o ser\\xE1 10\\n                                                },\\n                                                \\\"test\\\" : {\\n                                                    \\\"dataSource\\\" : \\\"PgSQL\\\",\\n                                                    \\\"host\\\" : \\\"localhost\\\",\\n                                                    \\\"port\\\" : 3306,\\n                                                    \\\"user\\\" : \\\"root\\\",\\n                                                    \\\"password\\\" : \\\"\\\",\\n                                                    \\\"database\\\" : \\\"\\\",\\n                                                    \\\"connectionLimit\\\" : 50 //Caso n\\xE3o informado o padr\\xE3o ser\\xE1 10\\n                                                }\\n                                            }\\n                                        }\\n                                    \"))), React.createElement(\"div\", {\n      id: \"structure\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Ap\\xF3s criar um novo projeto, vir\\xE1 com a seguinte estrutura.\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"\\n                                        \\u251C\\u2500\\u2500 NomeProjeto/\\n                                            \\u251C\\u2500\\u2500 src/\\n                                                \\u251C\\u2500\\u2500 Config/\\n                                                    \\u251C\\u2500\\u2500Core.json\\n                                                \\u251C\\u2500\\u2500 Controller/\\n                                                    \\u251C\\u2500\\u2500ExamplesControllerTest.js\\n                                                    \\u251C\\u2500\\u2500AppController.js\\n                                                \\u2514\\u2500\\u2500 Model/\\n                                                    \\u251C\\u2500\\u2500Example.js\\n                                            \\u251C\\u2500\\u2500 test/\\n                                                \\u251C\\u2500\\u2500 Controller/\\n                                                    \\u251C\\u2500\\u2500ExamplesControllerTest.js\\n                                            \\u251C\\u2500\\u2500 Gruntfile.js\\n                                            \\u251C\\u2500\\u2500 init.js\\n                                            \\u2514\\u2500\\u2500 package.json\\n                                    \"))), React.createElement(\"div\", {\n      className: \"mt-5\",\n      id: \"controllerFindBy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"text-secondary font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"M\\xE9todos da controller\"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"FindBy()\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"M\\xE9todo usado para buscar por um ou mais campos da base de dados\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"\\n                                        'use strict';\\n                                        const AppController = require('./AppController');\\n                                        \\n                                        class ExamplesController extends AppController {\\n                                        \\n                                            init() {\\n                                                this.model('Example');\\n                                            }\\n                                            //Fun\\xE7\\xE3o a ser chamada em sua requisi\\xE7\\xE3o do tipo get - http://127.0.0.1:5555/Examples?id=1\\n                                            //Caso o nome de sua fun\\xE7\\xE3o for diferente de get() ent\\xE3o dever\\xE1 passar o nome da fun\\xE7\\xE3o junto a chamada.\\n                                            Ex: http://127.0.0.1:5555/Examples/NomeFuncao/?id=1\\n\\n                                            get(callback) {\\n                                                this.Example.findBy({\\\"id\\\": this.query.id}).\\n                                                    //Este m\\xE9todo corresponde ao seguinte sql:\\n                                                    // SELECT * FROM Example WHERE id = 1;\\n                                                    then(res => {\\n                                                        this.logger.info(res);\\n                                                        //Retorna a resposta para o front end.\\n                                                        callback(this.responseSuccess(res));\\n                                                    }).\\n                                                    catch(err => {\\n                                                        this.statusCode = 500;\\n                                                        this.logger.error(err.message)\\n                                                        callback(this.responseError(\\\"Erro\\\", err.message, this.statusCode));\\n                                                    });\\n                                            }\\n                                        }\\n\\n                                        module.exports = ExamplesController;\\n                                    \"))), React.createElement(\"div\", {\n      id: \"controllerFindAll\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"FindAll()\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"M\\xE9todo usado para buscar todos os registros da base de dados\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"\\n                                        get(callback) {\\n                                            this.Example.findAll().\\n                                                //Este m\\xE9todo corresponde ao seguinte sql:\\n                                                // SELECT * FROM Example;\\n                                                then(res => {\\n                                                    this.logger.info(res);\\n                                                    //Retorna a resposta para o front end.\\n                                                    callback(this.responseSuccess(res));\\n                                                }).\\n                                                catch(err => {\\n                                                    this.statusCode = 500;\\n                                                    this.logger.error(err.message);\\n                                                    callback(this.responseError(\\\"Erro\\\", err.message, this.statusCode));\\n                                                });\\n                                        }\\n                                    \"))), React.createElement(\"div\", {\n      id: \"controllerFindAllParams\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"FindAll(parametros)\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"M\\xE9todo usado para buscar todos os registros da base de dados\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"\\n                                        get(callback) {\\n                                            //Com parametros;\\n                                            const params = {\\n                                                \\\"conditions\\\": [{\\n                                                    \\\"user_id\\\": this.query.user_id\\n                                                },{\\n                                                    \\\"name\\\": this.query.name,\\n                                                }]\\n                                            }\\n\\n                                            //Fazendo buscas pelo nome;\\n                                            const params = {\\n                                                \\\"conditions\\\": [{\\n                                                    \\\"name\\\": '%' + this.query.name + '%',\\n                                                    \\\"operation\\\": \\\"ILIKE\\\"\\n                                                }],\\n                                            }\\n\\n                                            //Order, Group, Limit;\\n                                            const params = {\\n                                                \\\"conditions\\\": [{\\n                                                    \\\"name\\\": '%' + this.query.name + '%',\\n                                                    \\\"operation\\\": \\\"ILIKE\\\"\\n                                                }],\\n                                                \\\"order\\\": [\\\"name\\\", \\\"id\\\"],\\n                                                \\\"group\\\": [\\\"name\\\"],\\n                                                \\\"limit\\\": \\\"10\\\",\\n                                            }\\n\\n                                            this.Example.findAll(params).\\n                                                then(res => {\\n                                                    this.logger.info(res);\\n                                                    //Retorna a resposta para o front end.\\n                                                    callback(this.responseSuccess(res));\\n                                                }).\\n                                                catch(err => {\\n                                                    this.statusCode = 500;\\n                                                    this.logger.error(err.message);\\n                                                    callback(this.responseError(\\\"Erro\\\", err.message, this.statusCode));\\n                                                });\\n                                        }\\n                                    \"))), React.createElement(\"div\", {\n      id: \"controllerFindAllParams\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"FindAll com join\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"M\\xE9todo usado para buscar os registros da base de dados com join\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"\\n                                        get(callback) {\\n                                            const params = {\\n                                                \\\"conditions\\\": {\\n                                                    \\\"user_id\\\": this.query.user_id\\n                                                },\\n                                                \\\"join\\\": {\\n                                                    //Tipo do join(INNER, LEFT);\\n                                                    \\\"INNER\\\": {\\n                                                        \\\"table\\\": \\\"tableexample\\\",\\n                                                        \\\"on\\\": \\\"tableexample.example_id = example.id\\\"\\n                                                    }\\n                                                },\\n                                                \\\"fields\\\": [\\\"tableexample.*\\\", \\\"example.id AS example_id, example.name\\\"]\\n                                            }\\n\\n                                            this.Example.findAll(params).\\n                                                then(res => {\\n                                                    this.logger.info(res);\\n                                                    //Retorna a resposta para o front end.\\n                                                    callback(this.responseSuccess(res));\\n                                                }).\\n                                                catch(err => {\\n                                                    this.statusCode = 500;\\n                                                    this.logger.error(err.message);\\n                                                    callback(this.responseError(\\\"Erro\\\", err.message, this.statusCode));\\n                                                });\\n                                        }\\n                                    \"))), React.createElement(\"div\", {\n      id: \"controllerSave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Save()\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"M\\xE9todo usado para salvar um registro da base de dados\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"\\n                                        post(callback) {\\n                                            this.Example.Save(this.payload).\\n                                                then(res => {\\n                                                    this.logger.info(res);\\n                                                    //Retorna a resposta para o front end.\\n                                                    callback(this.responseSuccess(res));\\n                                                }).\\n                                                catch(err => {\\n                                                    this.statusCode = 500;\\n                                                    this.logger.error(err.message);\\n                                                    callback(this.responseError(\\\"Erro\\\", err.message, this.statusCode));\\n                                                });\\n                                        }\\n                                    \"))), React.createElement(\"div\", {\n      id: \"controllerSave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Update()\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"M\\xE9todo usado para buscar atualizar um registro da base de dados\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"\\n                                        put(callback) {\\n                                            this.Example.Update(this.payload, {\\\"id\\\": this.id}).\\n                                                then(res => {\\n                                                    this.logger.info(res);\\n                                                    //Retorna a resposta para o front end.\\n                                                    callback(this.responseSuccess(res));\\n                                                }).\\n                                                catch(err => {\\n                                                    this.statusCode = 500;\\n                                                    this.logger.error(err.message);\\n                                                    callback(this.responseError(\\\"Erro\\\", err.message, this.statusCode));\\n                                                });\\n                                        }\\n                                    \"))), React.createElement(\"div\", {\n      id: \"controllerDelete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Delete()\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"M\\xE9todo usado para excluir um registro da base de dados\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"\\n                                        delete(callback) {\\n                                            this.Example.Delete({\\\"id\\\": this.payload.id}).\\n                                                then(res => {\\n                                                    this.logger.info(res.rows);\\n                                                    //Retorna a resposta para o front end.\\n                                                    callback(this.responseSuccess(res.rows));\\n                                                }).\\n                                                catch(err => {\\n                                                    this.statusCode = 500;\\n                                                    this.logger.error(err.message);\\n                                                    callback(this.responseError(\\\"Erro\\\", err.message, this.statusCode));\\n                                                });\\n                                        }\\n                                    \"))), React.createElement(\"div\", {\n      id: \"model\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Sobrescrevendo o m\\xE9todo findAll()\"), React.createElement(\"p\", {\n      className: \"text-secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Na model pode sobrescrever algum m\\xE9todo pad\\xE3o ou criar um novo.\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"\\n                                        'use strict';\\n                                        var AppModel = require('vmagic/AppModel');\\n                                        \\n                                        class Example extends AppModel {\\n                                            init() {\\n                                                this.useTable = 'example';\\n                                                //\\xC9 necess\\xE1rio que instancie o component PgSQL para poder sobrescrever o m\\xE9todo.\\n                                                this.pgsql = this.component('PgSQL');\\n                                            }\\n\\n                                            findAll() {\\n                                                const that = this;\\n                                        \\n                                                return new Promise((resolve, reject) => {\\n                                                    const sql = \\\"select * from example\\\";\\n                                        \\n                                                    this.pgsql.connect().\\n                                                        then(connection => {\\n                                                            connection.query(\\n                                                                sql, [],\\n                                                                function (err, res) {\\n                                                                    that.pgsql.close(connection);\\n                                                                    if (err) {\\n                                                                        reject(err);\\n                                                                    } else {\\n                                                                        resolve(res);\\n                                                                    }\\n                                                                }\\n                                                            );\\n                                                        }).\\n                                                        catch(err => {\\n                                                            reject(err);\\n                                                        });\\n                                                });\\n                                            }\\n\\n                                        }\\n\\n                                        module.exports = Example;\\n                                    \")), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Sobrescrevendo o m\\xE9todo findBy()\"), React.createElement(\"pre\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"\\n                                        findBy(id) {\\n                                            const that = this;\\n\\n                                            return new Promise((resolve, reject) => {\\n                                                const sql = \\\"SELECT * FROM example WHERE id = $1\\\";\\n                                    \\n                                                this.pgsql.connect().\\n                                                    then(connection => {\\n                                                        connection.query(\\n                                                            sql, [id],\\n                                                            function (err, res) {\\n                                                                that.pgsql.close(connection);\\n                                                                if (err) {\\n                                                                    reject(err);\\n                                                                } else {\\n                                                                    resolve(res);\\n                                                                }\\n                                                            }\\n                                                        );\\n                                                    }).\\n                                                    catch(err => {\\n                                                        reject(err);\\n                                                    });\\n                                            });\\n                                        }\\n                                    \")))), React.createElement(AnchorLink, {\n      href: \"#home\",\n      className: \"btn btn-secondary backToTop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(MdArrowDropUp, {\n      size: 50,\n      color: \"#220052\",\n      title: \"Voltar ao topo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/emv/Documents/Projects/vmagic-doc/src/View/Page/Pgsql.js"],"names":["React","Component","Header","AnchorLink","MdArrowDropUp","Home","constructor","props","state","render","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Header } from \"../../Component\";\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport {MdArrowDropUp} from \"react-icons/md\";\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n    render() {\n        return (\n            <div id=\"home\">\n                <Header page={1} />\n                <div className=\"container\">\n                    <ul className=\"list-group positionList\">\n                        <AnchorLink href=\"#instalation\" className=\"list-group-item list-group-item-action\">Instalação</AnchorLink>\n                        <AnchorLink href=\"#structure\" className=\"list-group-item list-group-item-action\">Estrutura do projeto</AnchorLink>\n                        <AnchorLink href=\"#config\" className=\"list-group-item list-group-item-action\">Configuração</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"list-group-item list-group-item-action\">Controller</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"ml-2 list-group-item list-group-item-action text-secondary\" style={{fontSize: 15}}>Métodos</AnchorLink>\n                        <AnchorLink href=\"#controllerFindBy\" className=\"ml-2 list-group-item list-group-item-action\">FindBy()</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAll\" className=\"ml-2 list-group-item list-group-item-action\">FindAll()</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAllParams\" className=\"ml-2 list-group-item list-group-item-action\">FindAll(parametros)</AnchorLink>\n                        <AnchorLink href=\"#controllerFindAllJoin\" className=\"ml-2 list-group-item list-group-item-action\">FindAll() com join</AnchorLink>\n                        <AnchorLink href=\"#controllerSave\" className=\"ml-2 list-group-item list-group-item-action\">Save()</AnchorLink>\n                        <AnchorLink href=\"#controllerUpdate\" className=\"ml-2 list-group-item list-group-item-action\">Update()</AnchorLink>\n                        <AnchorLink href=\"#controllerDelete\" className=\"ml-2 list-group-item list-group-item-action\">Delete()</AnchorLink>\n                        <AnchorLink href=\"#model\" className=\"list-group-item list-group-item-action\">Model</AnchorLink>\n                    </ul>\n                    <div className=\"margin\">\n                        <h1 className=\"text-secondary\">Postgres</h1>\n                        <div id=\"instalation\">\n                            <h5>Instalando o vMagic</h5>\n                            <p className=\"text-secondary\">Instale-o da seguinte maneira usando o npm</p>\n                            <p className=\"text-secondary font-weight-bold\">$ npm install -g vmagic-cli</p>\n                            <h5 className=\"mt-2\">Depois de instalado, você pode usar o comando vmagic-cli new para criar um novo projeto.</h5>\n                            <p className=\"text-secondary\">Por exemplo, para criar um novo projeto chamado emvApi, basta executar:</p>\n                            <p className=\"text-secondary font-weight-bold\">$ vmagic-cli new emvApi</p>\n                        </div>\n                        <div id=\"config\">\n                            <h5>Configurando conexão Postgres</h5>\n                            <p className=\"text-secondary\">Editar o arquivo: src/Config/core.json</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        {\n                                            \"dataSources\" : {\n                                                \"default\" : {\n                                                    \"dataSource\" : \"PgSQL\",\n                                                    \"host\" : \"localhost\",\n                                                    \"port\" : 3306,\n                                                    \"user\" : \"root\",\n                                                    \"password\" : \"\",\n                                                    \"database\" : \"\",\n                                                    \"connectionLimit\" : 50 //Caso não informado o padrão será 10\n                                                },\n                                                \"test\" : {\n                                                    \"dataSource\" : \"PgSQL\",\n                                                    \"host\" : \"localhost\",\n                                                    \"port\" : 3306,\n                                                    \"user\" : \"root\",\n                                                    \"password\" : \"\",\n                                                    \"database\" : \"\",\n                                                    \"connectionLimit\" : 50 //Caso não informado o padrão será 10\n                                                }\n                                            }\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"structure\">\n                            <h5>Após criar um novo projeto, virá com a seguinte estrutura.</h5>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        ├── NomeProjeto/\n                                            ├── src/\n                                                ├── Config/\n                                                    ├──Core.json\n                                                ├── Controller/\n                                                    ├──ExamplesControllerTest.js\n                                                    ├──AppController.js\n                                                └── Model/\n                                                    ├──Example.js\n                                            ├── test/\n                                                ├── Controller/\n                                                    ├──ExamplesControllerTest.js\n                                            ├── Gruntfile.js\n                                            ├── init.js\n                                            └── package.json\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div className=\"mt-5\" id=\"controllerFindBy\">\n                            <h3 className=\"text-secondary font-weight-bold\">Métodos da controller</h3>\n                            <h5>FindBy()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar por um ou mais campos da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        'use strict';\n                                        const AppController = require('./AppController');\n                                        \n                                        class ExamplesController extends AppController {\n                                        \n                                            init() {\n                                                this.model('Example');\n                                            }\n                                            //Função a ser chamada em sua requisição do tipo get - http://127.0.0.1:5555/Examples?id=1\n                                            //Caso o nome de sua função for diferente de get() então deverá passar o nome da função junto a chamada.\n                                            Ex: http://127.0.0.1:5555/Examples/NomeFuncao/?id=1\n\n                                            get(callback) {\n                                                this.Example.findBy({\"id\": this.query.id}).\n                                                    //Este método corresponde ao seguinte sql:\n                                                    // SELECT * FROM Example WHERE id = 1;\n                                                    then(res => {\n                                                        this.logger.info(res);\n                                                        //Retorna a resposta para o front end.\n                                                        callback(this.responseSuccess(res));\n                                                    }).\n                                                    catch(err => {\n                                                        this.statusCode = 500;\n                                                        this.logger.error(err.message)\n                                                        callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                    });\n                                            }\n                                        }\n\n                                        module.exports = ExamplesController;\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAll\">\n                            <h5>FindAll()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar todos os registros da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            this.Example.findAll().\n                                                //Este método corresponde ao seguinte sql:\n                                                // SELECT * FROM Example;\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAllParams\">\n                            <h5>FindAll(parametros)</h5>\n                            <p className=\"text-secondary\">Método usado para buscar todos os registros da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            //Com parametros;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"user_id\": this.query.user_id\n                                                },{\n                                                    \"name\": this.query.name,\n                                                }]\n                                            }\n\n                                            //Fazendo buscas pelo nome;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"name\": '%' + this.query.name + '%',\n                                                    \"operation\": \"ILIKE\"\n                                                }],\n                                            }\n\n                                            //Order, Group, Limit;\n                                            const params = {\n                                                \"conditions\": [{\n                                                    \"name\": '%' + this.query.name + '%',\n                                                    \"operation\": \"ILIKE\"\n                                                }],\n                                                \"order\": [\"name\", \"id\"],\n                                                \"group\": [\"name\"],\n                                                \"limit\": \"10\",\n                                            }\n\n                                            this.Example.findAll(params).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerFindAllParams\">\n                            <h5>FindAll com join</h5>\n                            <p className=\"text-secondary\">Método usado para buscar os registros da base de dados com join</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        get(callback) {\n                                            const params = {\n                                                \"conditions\": {\n                                                    \"user_id\": this.query.user_id\n                                                },\n                                                \"join\": {\n                                                    //Tipo do join(INNER, LEFT);\n                                                    \"INNER\": {\n                                                        \"table\": \"tableexample\",\n                                                        \"on\": \"tableexample.example_id = example.id\"\n                                                    }\n                                                },\n                                                \"fields\": [\"tableexample.*\", \"example.id AS example_id, example.name\"]\n                                            }\n\n                                            this.Example.findAll(params).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerSave\">\n                            <h5>Save()</h5>\n                            <p className=\"text-secondary\">Método usado para salvar um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        post(callback) {\n                                            this.Example.Save(this.payload).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerSave\">\n                            <h5>Update()</h5>\n                            <p className=\"text-secondary\">Método usado para buscar atualizar um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        put(callback) {\n                                            this.Example.Update(this.payload, {\"id\": this.id}).\n                                                then(res => {\n                                                    this.logger.info(res);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"controllerDelete\">\n                            <h5>Delete()</h5>\n                            <p className=\"text-secondary\">Método usado para excluir um registro da base de dados</p>\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        delete(callback) {\n                                            this.Example.Delete({\"id\": this.payload.id}).\n                                                then(res => {\n                                                    this.logger.info(res.rows);\n                                                    //Retorna a resposta para o front end.\n                                                    callback(this.responseSuccess(res.rows));\n                                                }).\n                                                catch(err => {\n                                                    this.statusCode = 500;\n                                                    this.logger.error(err.message);\n                                                    callback(this.responseError(\"Erro\", err.message, this.statusCode));\n                                                });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n\n                        <div id=\"model\">\n                            <h5>Sobrescrevendo o método findAll()</h5>\n                            <p className=\"text-secondary\">Na model pode sobrescrever algum método padão ou criar um novo.</p>\n\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        'use strict';\n                                        var AppModel = require('vmagic/AppModel');\n                                        \n                                        class Example extends AppModel {\n                                            init() {\n                                                this.useTable = 'example';\n                                                //É necessário que instancie o component PgSQL para poder sobrescrever o método.\n                                                this.pgsql = this.component('PgSQL');\n                                            }\n\n                                            findAll() {\n                                                const that = this;\n                                        \n                                                return new Promise((resolve, reject) => {\n                                                    const sql = \"select * from example\";\n                                        \n                                                    this.pgsql.connect().\n                                                        then(connection => {\n                                                            connection.query(\n                                                                sql, [],\n                                                                function (err, res) {\n                                                                    that.pgsql.close(connection);\n                                                                    if (err) {\n                                                                        reject(err);\n                                                                    } else {\n                                                                        resolve(res);\n                                                                    }\n                                                                }\n                                                            );\n                                                        }).\n                                                        catch(err => {\n                                                            reject(err);\n                                                        });\n                                                });\n                                            }\n\n                                        }\n\n                                        module.exports = Example;\n                                    `}\n                                </code>\n                            </pre>\n                            <h5>Sobrescrevendo o método findBy()</h5>\n\n                            <pre className=\"bg-dark\">\n                                <code className=\"text-white\">\n                                    {`\n                                        findBy(id) {\n                                            const that = this;\n\n                                            return new Promise((resolve, reject) => {\n                                                const sql = \"SELECT * FROM example WHERE id = $1\";\n                                    \n                                                this.pgsql.connect().\n                                                    then(connection => {\n                                                        connection.query(\n                                                            sql, [id],\n                                                            function (err, res) {\n                                                                that.pgsql.close(connection);\n                                                                if (err) {\n                                                                    reject(err);\n                                                                } else {\n                                                                    resolve(res);\n                                                                }\n                                                            }\n                                                        );\n                                                    }).\n                                                    catch(err => {\n                                                        reject(err);\n                                                    });\n                                            });\n                                        }\n                                    `}\n                                </code>\n                            </pre>\n                        </div>\n                    </div>\n                    <AnchorLink href=\"#home\" className=\"btn btn-secondary backToTop\">\n                        <MdArrowDropUp size={50} color=\"#220052\" title=\"Voltar ao topo\" />\n                    </AnchorLink>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}